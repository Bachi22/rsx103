---
- name: Setup Docker-ELK stack with custom configs
  hosts: all
  become: yes
  gather_facts: yes

  vars_files:
    - elk_secret.yml

  vars:
    ip_addr: "{{ ansible_default_ipv4.address }}"

  tasks:
   # DEBUG
    - name: Nettoyer les anciens conteneurs et volumes
      shell: |
          docker rm -f $(docker ps -aq) || true
          docker volume rm $(docker volume ls -q) || true
      ignore_errors: true

    - name: Supprimer répertoire LLDAP
      file:
        path: "/opt/docker-elk"
        state: absent
      ignore_errors: true

   # REAL INSTALL
    - name: Afficher la valeur de ip_addr détectée automatiquement
      debug:
        msg: "L'adresse IP utilisée est : {{ ip_addr }}"

    - name: Cloner le dépôt docker-elk
      git:
        repo: https://github.com/deviantony/docker-elk.git
        dest: /opt/docker-elk
        version: main

    - name: Copier le kibana.yml custom
      template:
        src: kibana.yml.j2
        dest: /opt/docker-elk/kibana/config/kibana.yml
        mode: '0644'

    - name: Copier le .env custom
      template:
        src: env.j2
        dest: /opt/docker-elk/.env
        mode: '0644'

    - name: Copier le fleet-compose.yml custom
      copy:
        src: fleet-compose.yml
        dest: /opt/docker-elk/extensions/fleet/fleet-compose.yml
        mode: '0644'

    - name: Lancement "Du setup"
      command: docker-compose -f /opt/docker-elk/docker-compose.yml up setup
      args:
        chdir: /opt/docker-elk
      register: install_output

    - name: Afficher la sortie de l'installation
      debug:
        msg: "{{ install_output.stdout }}"

    - name: Docker-compose up -d -> Lancement kibana
      command: docker-compose -f /opt/docker-elk/docker-compose.yml up -d
      args:
        chdir: /opt/docker-elk
      register: launch_output

    - name: Afficher la sortie lancement
      debug:
        msg: "{{ launch_output.stdout }}"

    - name: Waiting for ELK basic stack launching
      ansible.builtin.pause:
        minutes: 3

    - name: Integrating fleet
      command: docker-compose -f /opt/docker-elk/docker-compose.yml -f /opt/docker-elk/extensions/fleet/fleet-compose.yml up -d
      args:
        chdir: /opt/docker-elk
      register: launch_output

    - name: Afficher la sortie lancement
      debug:
        msg: "{{ launch_output.stdout }}"

    - name: Is everything working?
      command: docker ps
      register: verif_output

    - name: Afficher la sortie docker ps
      debug:
        msg: "{{ verif_output.stdout }}"

    - name: Initialiser Fleet avec curl
      shell: |
        curl -u elastic:{{changeme}} -X POST "http://localhost:5601/api/fleet/setup" \
          -H 'Content-Type: application/json' \
          -H 'kbn-xsrf: true'
      register: fleet_setup_result
      until: fleet_setup_result.rc == 0
      retries: 10
      delay: 5


    - name: Créer une policy Fleet Server avec curl
      shell: |
        curl -s -X POST "http://localhost:5601/api/fleet/agent_policies" \
          -u elastic:{{changeme}}  \
          -H 'Content-Type: application/json' \
          -H 'kbn-xsrf: true' \
          -d '{
            "name": "Fleet Server Policy",
            "namespace": "default",
            "monitoring_enabled": ["logs", "metrics"]
          }' > /tmp/create_policy_result.json
      args:
        executable: /bin/bash

    - name: Récupérer toutes les policies Fleet existantes
      shell: |
        curl -s -u elastic:{{changeme}}  -X GET "http://localhost:5601/api/fleet/agent_policies" -H 'kbn-xsrf: true'
      register: all_policies_response
      args:
        executable: /bin/bash

    - name: Extraire l'ID de la Agent Policy APM Server
      set_fact:
        agent_policy_id: "{{ (all_policies_response.stdout | from_json)['items'] | selectattr('name', 'equalto', 'Agent Policy APM Server') | map(attribute='id') | list | first }}"

    - name: Créer un enrollment token pour Agent Policy APM Server
      shell: |
        curl -u elastic:{{changeme}}  -X POST "http://localhost:5601/api/fleet/enrollment_api_keys" \
          -H 'kbn-xsrf: true' \
          -H 'Content-Type: application/json' \
          -d '{
            "name": "apmserver-enrollment-token",
            "policy_id": "{{ agent_policy_id }}"
          }'
      register: enrollment_token_response
      until: enrollment_token_response.rc == 0
      retries: 5
      delay: 5

    - name: Extraire le token depuis la réponse curl
      set_fact:
        enrollment_token: "{{ enrollment_token_response.stdout | from_json | json_query('item.api_key') }}"

    - name: Afficher le token récupéré
      debug:
        msg: "Enrollment token récupéré: {{ enrollment_token }}"
